import { ColumnInfo, RelationshipInfo, TableInfo } from './dbMetadataExtractor.js';

export interface FieldInfo {
  name: string;
  type: string;
  isOptional: boolean;
  columnName: string;
  isPrimaryKey: boolean;
  isNotNull: boolean;
  isUnique: boolean;
}

export interface EntityGenerationOptions {
  includeImports: boolean;
  includeConstructor: boolean;
  includeGettersSetters: boolean;
  includeToString: boolean;
  includeValidation: boolean;
  baseClass?: string;
}

/**
 * TypeScript Entity Code Generator (Session.ts pattern)
 * 
 * This class generates TypeScript entity classes following the exact pattern of session.ts
 */
export class CodeGenerationUtils {
  static generateFileHeader(tableName: string, schemaName: string = 'public'): string {
    const className = this.toPascalCase(tableName);
    return `/**
 * ${className}.ts
 *
 * Entity class generated from PostgreSQL table: ${schemaName}.${tableName}
 *
 * Auto-generated on ${new Date().toISOString().split('T')[0]}
 * Do not edit this file manually.
 */

`;
  }

  static formatTypeScriptCode(code: string): string {
    // Basic formatting - replace multiple empty lines with single
    return code.replace(/\n\n\n+/g, '\n\n').trim() + '\n';
  }

  static toPascalCase(str: string): string {
    return str
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join('');
  }
}

export class TypeScriptCodeGenerator {

  constructor() {
  }

  getDefaultOptions(): EntityGenerationOptions {
    return {
      includeImports: true,
      includeConstructor: true,
      includeGettersSetters: true,
      includeToString: true,
      includeValidation: false
    };
  }

  /**
   * Generate complete TypeScript entity class from table metadata following session.ts pattern
   */
  generateEntityClass(
    tableInfo: TableInfo,
    relationships: RelationshipInfo[],
    options: EntityGenerationOptions = this.getDefaultOptions()
  ): string {
    const className = this.toPascalCase(tableInfo.tableName);
    const fields = this.generateFieldsFromColumns(tableInfo.columns);
    
    const parts: string[] = [];

    // Imports
    parts.push(this.generateImports());

    // Class declaration
    parts.push(`export class ${className} extends Entity {`);
    parts.push('');

    // Private fields
    for (const field of fields) {
      const optionalSuffix = field.isOptional ? '?' : '';
      parts.push(`   private ${field.name}${optionalSuffix}: ${field.type};`);
    }
    parts.push('');

    // Constructor
    const constructorLines = this.generateConstructor(className, fields);
    for (const line of constructorLines) {
      parts.push(line.length > 0 ? `   ${line}` : '');
    }
    parts.push('');

    // Getter methods with annotations
    for (const field of fields) {
      const getterLines = this.generateAnnotatedGetter(field);
      for (const line of getterLines) {
        parts.push(line.length > 0 ? `   ${line}` : '');
      }
      parts.push('');
    }

    // Setter methods for nullable fields
    for (const field of fields) {
      if (field.isOptional && field.name !== 'id') {
        const setterLines = this.generateSetter(field);
        for (const line of setterLines) {
          parts.push(line.length > 0 ? `   ${line}` : '');
        }
        parts.push('');
      }
    }

    parts.push('}');
    parts.push('');

    // Repository class
    const repositoryLines = this.generateRepository(className, tableInfo.tableName);
    parts.push(...repositoryLines);

    return parts.join('\n');
  }



  private generateImports(): string {
    return `import { AbstractRepository, Entity } from "../abstractRepository";
import { Column } from "../annotations/Column";
import { Find } from "../annotations/find";
import { Id } from "../annotations/Id";
import { repository } from "../repository";`;
  }

  private generateFieldsFromColumns(columns: ColumnInfo[]): FieldInfo[] {
    return columns.map(col => ({
      name: this.toCamelCase(col.name),
      type: this.mapDatabaseTypeToTypeScript(col),
      isOptional: col.isNullable || col.name === 'id' || col.hasDefault,
      columnName: col.name,
      isPrimaryKey: col.isPrimary,
      isNotNull: !col.isNullable,
      isUnique: false // We'll handle this separately if needed
    }));
  }

  private generateConstructor(className: string, fields: FieldInfo[]): string[] {
    const lines: string[] = [];
    
    // Build constructor parameter with object destructuring like session.ts
    const params: string[] = [];
    for (const field of fields) {
      const optionalSuffix = field.isOptional ? '?' : '';
      params.push(`${field.name}${optionalSuffix}: ${field.type}`);
    }
    
    const paramString = `{ ${params.join(', ')} }: { ${params.join(', ')} }`;
    lines.push(`constructor(${paramString}) {`);
    lines.push('   super();');
    
    // Assign all fields
    for (const field of fields) {
      lines.push(`   this.${field.name} = ${field.name};`);
    }
    
    lines.push('}');

    return lines;
  }

  private generateAnnotatedGetter(field: FieldInfo): string[] {
    const lines: string[] = [];
    const capitalizedName = this.toPascalCase(field.name);
    const returnType = field.isOptional ? `${field.type} | undefined` : field.type;
    
    if (field.isPrimaryKey) {
      lines.push(`@Id('${field.columnName}')`);
    } else {
      const columnOptions: string[] = [];
      columnOptions.push(`columnName: '${field.columnName}'`);
      if (field.isNotNull) {
        columnOptions.push('notNull: true');
      }
      if (field.isUnique) {
        columnOptions.push('unique: true');
      }
      
      lines.push(`@Column({ ${columnOptions.join(', ')} })`);
    }
    
    lines.push(`public get${capitalizedName}(): ${returnType} {`);
    lines.push(`   return this.${field.name};`);
    lines.push('}');
    
    return lines;
  }

  private generateSetter(field: FieldInfo): string[] {
    const lines: string[] = [];
    const capitalizedName = this.toPascalCase(field.name);
    
    lines.push(`public set${capitalizedName}(${field.name}${field.isOptional ? '?' : ''}: ${field.type}) {`);
    lines.push(`   this.${field.name} = ${field.name};`);
    lines.push('}');
    
    return lines;
  }

  private generateRepository(className: string, tableName: string): string[] {
    const lines: string[] = [];
    
    lines.push(`export class ${className}Repository extends AbstractRepository<${className}> {`);
    lines.push('');
    lines.push('   constructor() {');
    lines.push(`      super('${tableName}', ${className});`);
    lines.push('   }');
    lines.push('');
    lines.push('   @Find()');
    lines.push(`   public async findByUserLogin(userLogin: string): Promise<${className} | null> {`);
    lines.push('      return null;');
    lines.push('   }');
    lines.push('}');
    lines.push('');
    lines.push(`const ${this.toCamelCase(className)}Repository = new ${className}Repository();`);
    lines.push('');
    lines.push(`repository.set(${className}, ${this.toCamelCase(className)}Repository);`);
    lines.push('');
    lines.push(`export default ${this.toCamelCase(className)}Repository;`);
    
    return lines;
  }

  /**
   * Map database column type to TypeScript type
   */
  mapDatabaseTypeToTypeScript(column: ColumnInfo): string {
    // Remove array notation for mapping
    const baseType = column.dataType.replace('[]', '');
    const isArray = column.dataType.includes('[]');

    let tsType: string;

    // Map PostgreSQL types to TypeScript types
    switch (baseType.toLowerCase()) {
      case 'integer':
      case 'int':
      case 'int4':
      case 'smallint':
      case 'bigint':
      case 'int8':
      case 'serial':
      case 'bigserial':
      case 'numeric':
      case 'decimal':
      case 'real':
      case 'double precision':
      case 'float4':
      case 'float8':
        tsType = 'number';
        break;

      case 'character varying':
      case 'varchar':
      case 'character':
      case 'char':
      case 'text':
      case 'uuid':
        tsType = 'string';
        break;

      case 'boolean':
      case 'bool':
        tsType = 'boolean';
        break;

      case 'timestamp without time zone':
      case 'timestamp with time zone':
      case 'timestamp':
      case 'timestamptz':
      case 'date':
      case 'time':
      case 'timetz':
        tsType = 'Date';
        break;

      case 'json':
      case 'jsonb':
        tsType = 'any';
        break;

      case 'bytea':
        tsType = 'Buffer';
        break;

      default:
        tsType = 'any';
        break;
    }

    return isArray ? `${tsType}[]` : tsType;
  }

  toPascalCase(str: string): string {
    return str
      .split('_')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join('');
  }

  toCamelCase(str: string): string {
    const pascal = this.toPascalCase(str);
    return pascal.charAt(0).toLowerCase() + pascal.slice(1);
  }

  toKebabCase(str: string): string {
    return str
      .replace(/([a-z])([A-Z])/g, '$1-$2')
      .toLowerCase();
  }
}