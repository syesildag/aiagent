/**
 * Aiagentconversationmessages.ts.ts
 *
 * Entity class generated from PostgreSQL table: Entity class generated from PostgreSQL table: public.ai_agent_conversation_messages.AiAgentConversationMessages.ts
 *
 * Auto-generated on 2025-10-11
 * Do not edit this file manually.
 */

import { AbstractRepository, Entity } from "../repository/abstractRepository";
import { Column } from "../repository/annotations/Column";
import { Find } from "../repository/annotations/find";
import { Id } from "../repository/annotations/Id";
import { OneToOne } from "../repository/annotations/OneToOne";
import { OneToMany } from "../repository/annotations/OneToMany";
import { ManyToOne } from "../repository/annotations/ManyToOne";
import { repository } from "../repository/repository";
export class AiAgentConversationMessages extends Entity {

   private id?: number;
   private conversationId: number;
   private role: any;
   private content: string;
   private toolCalls?: any;
   private toolCallId?: any;
   private timestamp?: Date;
   private metadata?: any;

   constructor({ id, conversationId, role, content, toolCalls, toolCallId, timestamp, metadata }: { id?: number, conversationId: number, role: any, content: string, toolCalls?: any, toolCallId?: any, timestamp?: Date, metadata?: any }) {
      super();
      this.id = id;
      this.conversationId = conversationId;
      this.role = role;
      this.content = content;
      this.toolCalls = toolCalls;
      this.toolCallId = toolCallId;
      this.timestamp = timestamp;
      this.metadata = metadata;
   }

   @Id('id')
   public getId(): number | undefined {
      return this.id;
   }

   @Column({ columnName: 'conversation_id', notNull: true })
   public getConversationId(): number {
      return this.conversationId;
   }

   @Column({ columnName: 'role', notNull: true })
   public getRole(): any {
      return this.role;
   }

   @Column({ columnName: 'content', notNull: true })
   public getContent(): string {
      return this.content;
   }

   @Column({ columnName: 'tool_calls' })
   public getToolCalls(): any | undefined {
      return this.toolCalls;
   }

   @Column({ columnName: 'tool_call_id' })
   public getToolCallId(): any | undefined {
      return this.toolCallId;
   }

   @Column({ columnName: 'timestamp', notNull: true, hasDefault: true })
   public getTimestamp(): Date | undefined {
      return this.timestamp;
   }

   @Column({ columnName: 'metadata', hasDefault: true })
   public getMetadata(): any | undefined {
      return this.metadata;
   }

   public setToolCalls(toolCalls?: any) {
      this.toolCalls = toolCalls;
   }

   public setToolCallId(toolCallId?: any) {
      this.toolCallId = toolCallId;
   }

   public setTimestamp(timestamp?: Date) {
      this.timestamp = timestamp;
   }

   public setMetadata(metadata?: any) {
      this.metadata = metadata;
   }

}

class AiAgentConversationMessagesRepository extends AbstractRepository<AiAgentConversationMessages> {

   constructor() {
      super('ai_agent_conversation_messages', AiAgentConversationMessages);
   }

   // Add custom finder methods here as needed
   // Example:
   // @Find()
   // public async findByFieldName(fieldName: string): Promise<AiAgentConversationMessages | null> {
   //    return null;
   // }

}

const aiagentconversationmessagesRepository = new AiAgentConversationMessagesRepository();

repository.set(AiAgentConversationMessages, aiagentconversationmessagesRepository);

export default aiagentconversationmessagesRepository;
