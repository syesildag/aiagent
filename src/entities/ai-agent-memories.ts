/**
 * Aiagentmemories.ts.ts
 *
 * Entity class generated from PostgreSQL table: Entity class generated from PostgreSQL table: public.ai_agent_memories.AiAgentMemories.ts
 *
 * Auto-generated on 2025-10-04
 * Do not edit this file manually.
 */

import { AbstractRepository, Entity } from "../repository/abstractRepository";
import { Column } from "../repository/annotations/Column";
import { Find } from "../repository/annotations/find";
import { Id } from "../repository/annotations/Id";
import { repository } from "../repository/repository";
export class AiAgentMemories extends Entity {

   private id?: number;
   private type: string;
   private content: any;
   private source: string;
   private embedding: any;
   private tags?: string[];
   private confidence?: any;
   private createdAt?: Date;
   private updatedAt?: Date;

   constructor({ id, type, content, source, embedding, tags, confidence, createdAt, updatedAt }: { id?: number, type: string, content: any, source: string, embedding: any, tags?: string[], confidence?: any, createdAt?: Date, updatedAt?: Date }) {
      super();
      this.id = id;
      this.type = type;
      this.content = content;
      this.source = source;
      this.embedding = embedding;
      this.tags = tags;
      this.confidence = confidence;
      this.createdAt = createdAt;
      this.updatedAt = updatedAt;
   }

   @Id('id')
   public getId(): number | undefined {
      return this.id;
   }

   @Column({ columnName: 'type', notNull: true })
   public getType(): string {
      return this.type;
   }

   @Column({ columnName: 'content', notNull: true })
   public getContent(): any {
      return this.content;
   }

   @Column({ columnName: 'source', notNull: true })
   public getSource(): string {
      return this.source;
   }

   @Column({ columnName: 'embedding', notNull: true })
   public getEmbedding(): any {
      return this.embedding;
   }

   @Column({ columnName: 'tags' })
   public getTags(): string[] | undefined {
      return this.tags;
   }

   @Column({ columnName: 'confidence' })
   public getConfidence(): any | undefined {
      return this.confidence;
   }

   @Column({ columnName: 'created_at', notNull: true })
   public getCreatedAt(): Date | undefined {
      return this.createdAt;
   }

   @Column({ columnName: 'updated_at' })
   public getUpdatedAt(): Date | undefined {
      return this.updatedAt;
   }

   public setTags(tags?: string[]) {
      this.tags = tags;
   }

   public setConfidence(confidence?: any) {
      this.confidence = confidence;
   }

   public setCreatedAt(createdAt?: Date) {
      this.createdAt = createdAt;
   }

   public setUpdatedAt(updatedAt?: Date) {
      this.updatedAt = updatedAt;
   }

}

export class AiAgentMemoriesRepository extends AbstractRepository<AiAgentMemories> {

   constructor() {
      super('ai_agent_memories', AiAgentMemories);
   }

   // Enhanced finder methods with ordering support
   @Find()
   public async findByTypeOrderByCreatedAtDesc(type: string): Promise<AiAgentMemories[] | null> {
      return null; // Implementation handled by @Find decorator
   }

   @Find()
   public async findByTypeOrderByCreatedAtAsc(type: string): Promise<AiAgentMemories[] | null> {
      return null; // Implementation handled by @Find decorator
   }

   @Find()
   public async findByType(type: string): Promise<AiAgentMemories[] | null> {
      return null; // Implementation handled by @Find decorator
   }

   @Find()
   public async findAllOrderByCreatedAtDesc(): Promise<AiAgentMemories[]> {
      return []; // Implementation handled by @Find decorator
   }

   @Find()
   public async findAllOrderByCreatedAtAsc(): Promise<AiAgentMemories[]> {
      return []; // Implementation handled by @Find decorator
   }

   // Method to find memories by tags with ordering
   @Find()
   public async findByTagsOrderByCreatedAtDesc(tags: string[]): Promise<AiAgentMemories[] | null> {
      return null; // Note: This would need custom implementation for array containment
   }

   // Method for finding by multiple criteria with ordering
   @Find()
   public async findByTypeAndConfidenceOrderByCreatedAtDesc(type: string, confidence: number): Promise<AiAgentMemories[] | null> {
      return null; // Implementation handled by @Find decorator
   }

}

const aiagentmemoriesRepository = new AiAgentMemoriesRepository();

repository.set(AiAgentMemories, aiagentmemoriesRepository);

export default aiagentmemoriesRepository;
