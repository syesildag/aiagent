/**
 * Aiagentconversations.ts.ts
 *
 * Entity class generated from PostgreSQL table: Entity class generated from PostgreSQL table: public.ai_agent_conversations.AiAgentConversations.ts
 *
 * Auto-generated on 2025-10-11
 * Do not edit this file manually.
 */

import { AbstractRepository, Entity } from "../repository/abstractRepository";
import { Column } from "../repository/annotations/Column";
import { Find } from "../repository/annotations/find";
import { Id } from "../repository/annotations/Id";
import { OneToOne } from "../repository/annotations/OneToOne";
import { OneToMany } from "../repository/annotations/OneToMany";
import { ManyToOne } from "../repository/annotations/ManyToOne";
import { repository } from "../repository/repository";
import { AiAgentSession } from './ai-agent-session';
import { AiAgentConversationMessages } from './ai-agent-conversation-messages';
export class AiAgentConversations extends Entity {

   private id?: number;
   private sessionId: number;
   private userId?: any;
   private createdAt?: Date;
   private updatedAt?: Date;
   private metadata?: any;
   private session?: AiAgentSession;
   private conversationMessagess?: AiAgentConversationMessages[];

   constructor({ id, sessionId, userId, createdAt, updatedAt, metadata, session, conversationMessagess }: { id?: number, sessionId: number, userId?: any, createdAt?: Date, updatedAt?: Date, metadata?: any, session?: AiAgentSession, conversationMessagess?: AiAgentConversationMessages[] }) {
      super();
      this.id = id;
      this.sessionId = sessionId;
      this.userId = userId;
      this.createdAt = createdAt;
      this.updatedAt = updatedAt;
      this.metadata = metadata;
      this.session = session;
      this.conversationMessagess = conversationMessagess;
   }

   @Id('id')
   public getId(): number | undefined {
      return this.id;
   }

   @Column({ columnName: 'session_id', notNull: true })
   public getSessionId(): number {
      return this.sessionId;
   }

   @Column({ columnName: 'user_id' })
   public getUserId(): any | undefined {
      return this.userId;
   }

   @Column({ columnName: 'created_at', notNull: true, hasDefault: true })
   public getCreatedAt(): Date | undefined {
      return this.createdAt;
   }

   @Column({ columnName: 'updated_at', notNull: true, hasDefault: true })
   public getUpdatedAt(): Date | undefined {
      return this.updatedAt;
   }

   @Column({ columnName: 'metadata', hasDefault: true })
   public getMetadata(): any | undefined {
      return this.metadata;
   }

   @ManyToOne({ target: () => AiAgentSession, joinColumn: 'session_id' })
   public getSession(): AiAgentSession | undefined {
      return this.session;
   }

   @OneToMany({ target: () => AiAgentConversationMessages, mappedBy: 'conversation_id' })
   public getConversationMessagess(): AiAgentConversationMessages[] | undefined {
      return this.conversationMessagess;
   }

   public setUserId(userId?: any) {
      this.userId = userId;
   }

   public setCreatedAt(createdAt?: Date) {
      this.createdAt = createdAt;
   }

   public setUpdatedAt(updatedAt?: Date) {
      this.updatedAt = updatedAt;
   }

   public setMetadata(metadata?: any) {
      this.metadata = metadata;
   }

}

class AiAgentConversationsRepository extends AbstractRepository<AiAgentConversations> {

   constructor() {
      super('ai_agent_conversations', AiAgentConversations);
   }

   // Add custom finder methods here as needed
   // Example:
   // @Find()
   // public async findByFieldName(fieldName: string): Promise<AiAgentConversations | null> {
   //    return null;
   // }

}

const aiagentconversationsRepository = new AiAgentConversationsRepository();

repository.set(AiAgentConversations, aiagentconversationsRepository);

export default aiagentconversationsRepository;
