/**
 * Aiagentdocument.ts.ts
 *
 * Entity class generated from PostgreSQL table: Entity class generated from PostgreSQL table: public.ai_agent_document.AiAgentDocument.ts
 *
 * Auto-generated on 2025-10-08
 * Do not edit this file manually.
 */

import { AbstractRepository, Entity } from "../repository/abstractRepository";
import { Column } from "../repository/annotations/Column";
import { Find } from "../repository/annotations/find";
import { Id } from "../repository/annotations/Id";
import { ManyToOne } from "../repository/annotations/ManyToOne";
import { repository } from "../repository/repository";
import { AiAgentDocumentType } from './ai-agent-document-type';
export class AiAgentDocument extends Entity {

   private id?: number;
   private name: string;
   private content: string;
   private typeId: number;
   private embedding: any;
   private createdAt?: Date;
   private documentType?: AiAgentDocumentType;

   constructor({ id, name, content, typeId, embedding, createdAt, documentType }: { id?: number, name: string, content: string, typeId: number, embedding: any, createdAt?: Date, documentType?: AiAgentDocumentType }) {
      super();
      this.id = id;
      this.name = name;
      this.content = content;
      this.typeId = typeId;
      this.embedding = embedding;
      this.createdAt = createdAt;
      this.documentType = documentType;
   }

   @Id('id')
   public getId(): number | undefined {
      return this.id;
   }

   @Column({ columnName: 'name', notNull: true, unique: true })
   public getName(): string {
      return this.name;
   }

   @Column({ columnName: 'content', notNull: true, unique: true })
   public getContent(): string {
      return this.content;
   }

   @Column({ columnName: 'type_id', notNull: true })
   public getTypeId(): number {
      return this.typeId;
   }

   @Column({ columnName: 'embedding', notNull: true })
   public getEmbedding(): any {
      return this.embedding;
   }

   @Column({ columnName: 'created_at', notNull: true, hasDefault: true })
   public getCreatedAt(): Date | undefined {
      return this.createdAt;
   }

   @ManyToOne({ target: () => AiAgentDocumentType, joinColumn: 'type_id' })
   public getDocumentType(): AiAgentDocumentType | undefined {
      return this.documentType;
   }

   public setCreatedAt(createdAt?: Date) {
      this.createdAt = createdAt;
   }

}

class AiAgentDocumentRepository extends AbstractRepository<AiAgentDocument> {

   constructor() {
      super('ai_agent_document', AiAgentDocument);
   }

   // Auto-generated finder methods for unique columns
   @Find()
   public async findByName(name: string): Promise<AiAgentDocument | null> {
      return null;
   }

   @Find()
   public async findByContent(content: string): Promise<AiAgentDocument | null> {
      return null;
   }

}

const aiagentdocumentRepository = new AiAgentDocumentRepository();

repository.set(AiAgentDocument, aiagentdocumentRepository);

export default aiagentdocumentRepository;
